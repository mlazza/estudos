Bootcamp - 
Everis Kotlin Developer
03/2021
digitalinnovation.one

Características dos aprovados:

+ repositorio de projetos alinhados ao curriculo
+ artigos publicados 
+ integrados e colaborando em comunidade de devs
+ sonho grande e ambição
+ principais comunidades e sites de pesquisas dev: stackoverflow
+ concluido ou cursando graduacao em exatas
+ conhecimentos ou proximidade com Cloud, BigData, IA, recon. voz, mobilidade...
+ Conhecimento em metodologias ágeis, devops e UX
+ contas em provedores cloud e ferramentas online para devs
+ aprendizagem continua atraves da internet

- Flowgorithm - ferramenta para criar fluxogramas
- Portugol-Studio - github

ESTRUTURA DE DADOS E ALGORITMOS


1) O QUE É ESTRUTURA DE DADOS

é uma estrutura organizada de dados na memoria de um computadorr ou em qualquer dispositivo de armazenamento, de forma que os dados possam ser utilizados de forma correta.

muitas aplicações no desenvolvimento de sistemas, algumas são altamente especializadas e utilizadas em tarefas especificas. 

usando as estruturas adequadas atraves de algoritmos, podemos trabalhar com uma grande quantidade de dados, como aplicacoes em banco de dados ou servicos de busca.

ALGORITMO

os algoritmos são utilizados para manipular dados nas estruturas de varias formas, como por exemplo: inserir, excluir, procurar e ordenar dados.

em uma estrutura de dados devemos saber como realizar um determinado conjunto de operações básicas, como por exemplo:

- inserir dados
- incluir dados
- localizar um elemento
- percorrer todos os itens constituintes da estrutura para visualizacao
- classificar, que se resume em colocar os itens de dados em uma determinada ordem (numerica, alfabetica, etc.)

PRINCIPAIS ESTRUTURAS DE DADOS:

- Vetores e Matrizes
- Registro
- Lista
- Pilha
- Fila
- Árvore
- Tabela Hash
- Grafos

2) VETORES E MATRIZES

Vetores e Matrizes ou Arrays são estruturas de dados simples que podem auxiliar quando há muitas variáveis do mesmo tipo em um algoritmo.

O Vetor ou Array unidimensional é uma variavel que armazena varias variaveis do mesmo tipo. O vetor é uma estrutura de dados indexada, que pode armazenar uma determinada quantidade de valores do mesmo tipo.

alguns exemplos em Portugol

Matriz ou Array multidimensional é um vetor de vetores. Uma matriz é um vetor que possui duas ou mais dimensões.

3) REGISTROS

é uma estrutura que fornece um formato especializado para armazenar informações em memória. Enquanto arrays nos permitem armazenar vários dados de um unico tipo de dados, o recurso de Registro nos permite armazenar mais de um tipo de dado.

um Registro é compsoto por campos que especificam cada uma das informações que o compõem. 

Ex. Registro de um cliente

CPF
Nome
Endereco
Contato

Toda estrutura de registro tem um nome (ex. livro, cliente), e seus campos podemos ser acessados por meio do uso do operador ponto (.). Por exemplo, para acessar o preço de um livro, poderiamos utilizar a seguinte declaração:

livro.preco

ALGORITMO EXEMPLO
//declaracao do tipo de dado
tipo
	estrutura_livro = registro
		nome : caracter
		preco : real
		pagina : inteiro
	fimregistro

//declaracao das variaveis
	i : inteiro
	livro : array[1..3] de estrutura_livro
	
	Escreva('Entre com os nomes, precos e numeros de paginas de 3 livros1)
	para i de 1 ate 3 faca:
		leia(livro[i].nome, livro[i].preco, livro[i].paginas)
	fimpara
	
	Escreva('Esses foram os dados digitados:')
	para i de 1 ate 3 faca:
		Escreva(livro[i].nome, livro[i].preco, livro[i].paginas)
	fimpara
FIM ALGORITMO

4) LISTAS, PILHAS E FILAS

LISTAS

armazena dados de um determinado tipo em uma ordem específica.

tamanho ajustável (difere do Array = tam. fixo).

Dois tipos:

+ Ligadas

existem os 'nós' onde cada um dos nós conhece o valor que está sendo armazenado em seu interior além de conhecer o elemento posterior a ele: por isso ela é chamada de 'lista ligada', pois os nós são amarrados com essa indicacao de qual é o proximo nó.

'PEDRO' -> prox. nó

+ Duplamente Ligadas

constituem uma variação das listas ligadas. A grande diferença é que elas são bidirecionais. Os nós sabem quem é o proximo elemento e também quem é o elementos anterior, o que permite a navegação reversa.

 nó anterior <- 'PEDRO' -> próx. nó

PILHAS ('Stack')

é uma estrutura de dados que serve como uma coleção de elementos, e permite o acesso a somente um item de dados armazenado. O acesso aos itens de uma pilha é restrito. Um item pode ser lido ou removido por vez.

Tipos:

+LIFO ou UEPS

a estrutura do tipo LIFO (Last in First Out) ou UEPS (Último que Entra Primeiro que Sai), apresenta o seguinte critério: o primeiro elemento a ser retirado é o último que tiver sido inserido.

+FIFO ou PEPS

a estrutura do tipo FIFO (First In First Out) ou PEPS (Primeiro que entra Primeiro que sai), apresenta o seguinte critério: o primeiro a ser retirado é o primeiro que tiver sido inserido.

FILAS

admite remoção de elementos e inserção de novos sujeita a seguinte regra: o elemento removido é o que está na estrutura há mais tempo, ou seja, o primeiro objeto inserido na fila é também o primeiro a ser removido seguindo o conceito FIFO. (entra um novo e sai outro mais antigo)

5) ARVORE, TABELA HASH E GRAFOS

ARVORE

é uma estrutura de dados que organiza seus elementos de forma hierarquica, onde existe um elemento que fica no topo da árvore, chamado de raiz e existem os elementos subordinados a ele, que são chamados de nós ou folhas.

TABELA HASH

de dispersão ou espalhamento, é uma estrutura de dados especial, que associa chaves de pesquisa a valores.

é uma generalização da ideia de array, porém utiliza uma funcao denominada hashing para espalhar os elementos, fazendo com que os mesmos fiquem de forma não ordenada dentro do 'array' que define a tabela.

Por que espalhar? 

A tabela hash permite a associação de 'valores' a 'chaves'

Valores: é a posição ou indice onde o elemento se encontra.
Chave: parte da informação que compõe o elemento a ser manipulado.

Espalhar facilita a busca na estrutura de dados, pois a partir de uma chave podemos acessar de forma rapida uma posicao do 'array'.

GRAFOS

são estruturas que permitem programar a relação entre objetos. Os objetos são vértices ou 'nós' do grafo. Os relacionamentos são arestas.


GIT E GITHUB

GUI x CLI

Command line interface

Funcionamento por baixo dos panos

-SHA1
-Objetos fundamentais
-Sistema distribuido
-Seguranca

A sigla SHA significa Secure Hash Algorithm e é um conjunto de funcoes hash criptográficas projetadas pela NSA (Agencia de Seguranca Nacional EUA)

A encriptação gera um conjunto de caracteres identificador de 40 dígitos.

>>echo "ola mundo" | openssl sha1

>> openssl sha1 arquivo

OBJETOS DO GIT
+Blobs
+Trees
+Commits

BLOBS
bloco basico de composicao
------
Blob     Tamanho 42

\0
Ola Mundo
------

>> echo 'conteudo' | git hash-object --stdin
>> echo -e 'conteudo' | openssl sha1

>> echo 'conteudo' | git hash-object --stdin
>> echo -e 'blob 9\0conteudo' | openssl sha1
//aqui ja passando os metadados juntos e assim fica o mesmo hashcode

TREES
armazenam blobs
-------
Tree		<tamanho>
\0
blob   sa4d8s    texto.txt
-------

tree 
  -README
    -blob
  -Rakefile
    -blob
  -lib
    -tree
      -simplegit.rb
        -blob

COMMIT
objeto que dá sentido para a operação

---------
Commit    <tamanho>

tree		s4a5sq1
parente		a98acq1
autor		perkles
mensagem	"inicia..."
timestamp
---------
*O SHA1 desse commit é o hash de toda esta informação

O Git é um sistema distribuido seguro.

PRIMEIROS COMANDOS

-git init
-git add
-git commit

git add *
git commit -m "mensagem"

ESTAGIOS:
==============================================

			   -----------TRACKED------------
UNTRACKED  --  UNMODIFIED---MODIFIED---STAGED

Add o arquivo-------------------------------->

		       --edit_file-->

                             stage_file------>
                             
<---remove file-
               <---------------------commit---
==============================================

Remote Repository
Local Repository  <<  Staging Area  <<  Working Directory

==============================================

git status

git config --list

git config --global --unset user.name
//retira a propriedade e deixa em branco

git remote -v
//listando os reps remotos


// Resolvendo conflitos:

//traz primeiro o arquivo e ele indica qual arquivo esta com este conflito

0. git pull origin master

1. vai aparecer 'HEAD' e marcacoes como '<<<<<<<<<'
dentro disso é o que de mais novo tentamos colocar

2. git status

3. git add

4. git commit

5. git push

// baixar o repositorio do Git

1. git clone link

++++++++++++++++++++++++++++++++++++++++++++

INTRODUCAO AO KOTLIN

Android

-SO para dispositivos moveis mantido pela Google desde 2005;
-Mais de 2.5 bilhoes de usuarios ativos
-Presente em mais de 24 mil modelos de dispositivos diferentes
-Automoveis, vestiveis, TV, geladeiras e ate espelhos

Curiosidades:
-Android 3.0 (Honeycomb) - unica versao exlusiva para tablets
-O visual caracteristico do android surgiu na versao Ice Cream Sandwich
-Mais de 2 milhoes de apps publicados na google play
-No Brasil, 85% dos usuarios afirmam que seu primeiro smartphone foi um
Android.

Desenvolvimento Android

-Hibrido x Nativo
-Java, Kotlin, Dart, Jacascript e C#
-Documentacao
-Primeiros Passos
-Kotlin First

Documentação para desenvolvedores de apps - site do developer.android

KOTLIN

-Criada pela JetBrains em 2011, atualmente mantida pela Kotlin Foundation
-Linguagem multiplataforma, orientada a objetos e funcional
-Gratuito e de codigo aberto
-Nome em homenagem a ilha russa: Kotlin

Estrutura da Linguagem:
-não utiliza ponto e virgula
-nao possui operador ternario tradicional
-type safe e null safe
-inferencia de tipo
-e muito mais

Aplicabilidade:
-android nativo
-mobile multiplataforma (KMM)
-frontend web com Kotlin/JS
-frameworks: Kvison e Fritz2
-backend com target node.js do Kotlin/JS

Kotlin: vantagens

-segura, estruturada, menos verbosa, mais otimizada, grande relevancia no mercado
-interoperabilidade com o Java
-smart casts e null safety
-Android é Kotlin First

Kotlin + Android

-2016: primeira versão estavel do Kotlin é liberada
-2017: Google anuncia suporte a Kotlin para desenvolvimento Android
-2018: Segunda linguagem preferida dos desenvolvedores
-2019: Google anuncia que Kotlin é a nova linguagem oficial para desenvolvimento Android.

JAVA

Vai depender de demanda para existir. 

Não tem no Java:
- Projetos de Varias plataformas
- Jetpack Compose


KOTLIN - SINTAXE BÁSICA

TIPOS DE DADOS:

-Int
-Long
-Float
-Double
-Array
-Boolean
-Char
-Byte
-Short
-Null!

println(Int.MAX_VALUE)
println(Float.MAX_VALUE)
println(Long.MAX_VALUE)
println(Byte.MAX_VALUE)
println(Short.MAX_VALUE)

CONVERSÕES:

1. toByte()
2. toShort()
3. toInt()
4. toLong()
5. toFloat
6. toDouble()
7. toChar()

DECLARACAO DE VARIAVEL

- Var - valor mutavel, CamelCase: pode ser alterada

- Val - valor imutavel, CamelCase: nao pode ser alterada
(dentro do main)

- Const Val - valor imutavel, SNAKE_CASE: valor atribuida durante a compilacao
(fora do main)

Ex. 1

const val MAX_AGE = 68

fun main() {
    var currentAge: Int
    currentAge = 90
    
    println(currentAge > MAX_AGE)
}

Ex. 2



fun main() {

	val maxAge = 68
	var currentAge: Int
    currentAge = 90
    
    println(currentAge > maxAge)
}


PREVENDO ERROS

1 var currentAge
2 currentAge = 22 //ERRO! 
Precisa inicializar ou atribuir um tipo!

sol:
> var currentAge = 22
ou
>var currentAge:Int
> currentAge = 22


3 var currentYear = "Ano"
4 currentYear = 2021 //ERRO! 
A variavel estava setada para receber String e nao vai receber inteiro

sol:
>currentYear = 2021.toString() //convertendo o numero p/ string

VALOR NULO E OPERADORES ARITMETICOS BASICOS

NULLABILITY

- qualquer tipo pode ser nulo, porem isso deve ser explicitado na declaracao de variavel atraves do uso da interrogacao (?)
- a inferencia de tipo nao atribui nullability

var month:Int? = null
//atribui valor null corretamente a month

var day:Int = null
//erro de compilacao

Operadores

a+b
a-b
a*b
a/b
a%b

fun main(){
	val count = 10
	val times = 9
	val r = times +count
		println(r)
		println(count.plus(times))
}

OPERADORES COMPARATIVOS

a>b
a>=b
a==b
a!=b

a.compareTo(b) //se a>b=1; se a<b=-1; se a=b=0
//retornam os valores -1, 0 ou 1

a.equals(b)
!(a.equals(b))
//retorna um booleano true or false

OPERADORES LOGICOS E OPERADORES 'IN' e 'RANGE'

E = &&		(expressao1) and (expressao2)
OU = || 	(expressao1) or (expressao2)

contém (in)
não contém (!in)

Se o valor esta presente em uma lista ou uma faixa de valores
Range cria um intervalo de valores que inicia no primeiro parametro e acaba no segundo

val numbers = listOf(3,9,0,1,2)
print(12 in numbers)
//false

print(12 in 0..20)
//true


MANIPULANDO STRINGS

-Strings possuem diversos metodos associados
-Indexação, concatenacao, comparacao, formatacao
-Pode ser concatenada com plus/+
-Também é tratada como um array de Char
-String como array
-First(), last(), String.length, String[index]

val s = "Ola, mundo!"

println(s[0])
println(s.first())
//imprime 0

println(s[s.length-1])
println(s.last())
//imprime !

CONCATENACAO

-Para concatenar duas strings o plus/+ pode ser utilizado
-Para concatenar uma variavels a uma String, os simbolos ${} devem ser inseridos

val name = "Ana"
val s = "Ola"

println(s+name)
//imprime OlaAna

println("${s}, ${name}!")
//imprime Olá, Ana!

println("Bem vinda, $name!")
//imprime Bem vinda, Ana!

FORMATACAO

//Capitalizacao
capitalize(), toUpperCase(), toLowerCase(), decapitalize()

//Remocao de espacos
trimEnd(), trimStart(), trim()

//Substituicao de caracteres
replace(x,y)

//Formatacao
"padrao ${valor}".format(valor)

DIFERENCA ENTRE 'EMPTY' E 'BLANK'

-Métodos de comparação
-String está vazia, em branco ou é nula?

1) Se o tamanho da string (s.length) for 0 está empty e blank;

2) Se o tamanho for > 0 mas todos os caracteres são espaços em branco, está blank mas não empty.

val s = ""
println(s.isEmpty())
//true
println(s.isBlank())
//true
println(s.isNullOrBlank() || s.isNullorEmpty())
//true

val s = "     "
println(s.isEmpty())
//false
println(s.isBlank())
//true

INTRODUCAO A FUNCOES

-Prefixo 'fun nomeDaFuncao(nome:Tipo):TipoRetorno{}
-Funcoes anonimas, single-line, inline, extensoes, Lambdas, ordem superior;

private fun getFullname(name:String, lastName:String):String{
	val fullname = "$name $lastName"
	return fullname
}

private fun getFullname(name:String, lastName:String):String{
	return "$name $lastName"
}

private fun getFullname(name:String, lastName:String) = "$name $lastName"

FUNCOES DE ORDEM SUPERIOR

-Recebem outra funcao ou lambda por parametro;
-Bastante uteis para a generalizacao de funcoes e tto de erros

val x = calculate(12,4,::sum)
val y = calculate(12,4){a,b -> a*b}

FUNCOES SINGLE-LINE

-Prefixo 'fun nomeDaFuncao(nome:Tipo)=retorno;
-Função de uma unica linha
-Infere o tipo de retorno

private fun getFullname(name:String, lastName:String) = "$name $lastName"

FUNCOES/EXTENSOES

-Prefixo 'fun Tipo.nomeDaFuncao();
-Cria uma funcao que so pode ser chamada por um tipo especifico, cujo o valor pode ser referenciado dentro da funcao atraves da palavra this;

fun String.randomCapitalizedLetter() =
	this[(0..this.length-1).random()].toUpperCase()

ESTRUTURAS DE CONTROLE

-if/else, when, elvis operator;
-Pode ser utilizado tanto para controle quanto para atribuicao;
-Pode ser encadeado com multiplas estruturas

if(expressao){
	//codigo
} else if (expressao2){
	//codigo
} else { //codigo }

when {
	case1 -> {}
	case2 -> {}
	case3 -> {}
	else -> {}
}

val a:Int? = null
var number = a ?: 0
// number -> se 'a' for nulo atribui o zero

ATRIBUICAO

-O valor atribuido tem que estar na ultima linha do bloco;
-A condicional pode não usar chaves se só fizer a atribuicao

val MaxValue = if (a > b) a else if (a < b) b else b

	val minValue = if (a > b){
		println("b($b) é o menor valor")
		b
	}else if (a < b){
		println("a($a) é o menor valor")
		a
	}else{
		println("os valores são iguais")
		b
	}

WHEN

-Equivalente ao switch de outras linguagens
-Aceita tanto valores quanto condicionais
-Aceita range como case

when {
	a > b -> {}
	a != b && a > c -> {}
	b == 0 -> {}
	else -> {}
}

when(year){
	-4000..475 -> //Antiguidade
	476..1452 -> //Medieval
	1453..1789 -> Moderna
	currentYear -> //ano atual
}

ELVIS OPERATOR

-O mais proximo que a linguagem possui de um operador ternario
-Verifica se um valor é nulo e apresenta uma opcao caso seja
-Pode ser encadeado

val a:Int? = null
val c:Int? = 9
var number = a?: b?: 0

-Nesse caso, se o valor de 'a' nao for nulo, number recebe 'a'. Se o valor de 'a' for nulo e 'b' nao for nulo, number recebe 'b' se a e b forem nulos, ele recebe 0.

//funcao principal
fun main() {
	val grade = (0..10).random()
	println(grade.getStudentStatus())
}

fun Int.getStudentStatus():String{
	println("nota $this")
	
	return when(this){
	  in 0..4 -> "Reprovado"
	  in 5..7 -> "Mediano"
	  in 8..9 -> "Bom"
	  10 -> "Excelente"
	  else -> "Indefinido"
	  }
}

OU


//funcao principal
fun main() {
	
	
	var t:Int
	var x:Int? = null
	var o:Int? = 10
	t = x?: w?: -1
	
	println(t)
}


ESTRUTURAS DE REPETICAO

-While, do..while, for e forEach
-Estruturas similares as convencionais em outras linguagens
-Aceita os comandos in, range, until, downTo e step

while(condicao){
}

do{
	//codigo
} while(condicao)

for(i in 0..20 step 2){
	//codigo
}

FOR

for(var_indexadora 'in' / 'until' / 'downTo' faixa de valores / condicional 'step' intervalo)

in: conta do valor inicial até o valor final
until: conta do valor atual até o valor final menos 1
downTo: conta de maneira decrescente
step: determina o intervalo de contagem

1. for(i in 0..20 step 2) {println("$i")}
2. for(i in 0 until 10) {println("$i")}
3. for(i in 10 downTo 0) {println("$i")}

var text = "Kotlin"
for (letter in text){
	println(letter)
}

PROPOSTA DE EXERCICIO FINAL

Criar uma calculadora que dados dois valores float e um numero correspondente a operacao(constante), retorne e imprima o resultado como float ou uma mensagem de erro caso um dos valores seja nulo.


/**
 * Criar uma calculadora que dados dois valores float e um numero 
 * correspondente a operacao(constante), retorne e imprima o resultado 
 * como float ou uma mensagem de erro caso um dos valores seja nulo.
 */


fun main(){
	
    println("CALCULADORA MODERNA")
    println("ESCOLHA A OPCAO DE CALCULO")
	println("1 - SOMA;")
    println("2 - SUBTRACAO;")
    println("3 - MULTIPLICACAO;")
    println("4 - DIVISAO.")
    println("*qualquer outra tecla pra sair")
    
    var opcaolida:String? = readLine()
    var opcao = opcaolida?.toInt()
    
    while(opcao in 1..4){
    	println("Digite o primeiro valor:")
        val n1 = readLine()?.toFloat()
        println("Digite o segundo valor:")
        val n2 = readLine()?.toFloat()
               
        if(opcao == 1)
    		somar(n1, n2)	
   		else if (opcao == 2)
        	//subtrair(n1, n2)
        else if(opcao == 3)
        	//multiplicar(n1, n2)
        else 
        	//dividir(n1, n2)
        	println("outro")    
    }
}

fun somar(n1:Float?, n2:Float?): Unit{
    println("$n1.plus($n2)")
}


































